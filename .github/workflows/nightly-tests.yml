name: Nightly Tests and Builds

on:
  schedule:
    # Run at 2 AM UTC every day
    - cron: '0 2 * * *'
  workflow_dispatch:

permissions:
  contents: write
  issues: write

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: full

jobs:
  build-and-test-matrix:
    name: Build & Test ${{ matrix.platform.name }}
    runs-on: ${{ matrix.platform.os }}
    timeout-minutes: 90
    strategy:
      fail-fast: false
      matrix:
        platform:
          - name: Linux x86_64
            os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            rustflags: "-C target-feature=+aes,+sse2"
            artifact_name: mettatron-linux-x86_64

          - name: Linux ARM64
            os: ubuntu-24.04-arm
            target: aarch64-unknown-linux-gnu
            rustflags: "-C target-feature=+aes,+neon"
            artifact_name: mettatron-linux-arm64

          - name: macOS x86_64
            os: macos-13
            target: x86_64-apple-darwin
            rustflags: "-C target-feature=+aes,+sse2"
            artifact_name: mettatron-macos-x86_64

          - name: macOS ARM64
            os: macos-latest
            target: aarch64-apple-darwin
            rustflags: "-C target-feature=+aes,+neon"
            artifact_name: mettatron-macos-arm64

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Checkout dependencies (Unix)
        if: runner.os != 'Windows'
        run: |
          cd ../
          git clone --depth=1 --branch dylon/mettatron https://github.com/F1R3FLY-io/f1r3node.git f1r3node
          git clone --depth=1 --branch main https://github.com/trueagi-io/MORK.git MORK
          git clone --depth=1 --branch master https://github.com/Adam-Vandervorst/PathMap.git PathMap

      - name: Install protobuf compiler (Linux)
        if: runner.os == 'Linux'
        run: sudo apt-get update && sudo apt-get install -y protobuf-compiler

      - name: Install protobuf compiler (macOS)
        if: runner.os == 'macOS'
        run: brew install protobuf

      - name: Install Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: nightly
          target: ${{ matrix.platform.target }}

      - name: Install Tree-Sitter CLI
        run: |
          echo "::group::Installing Tree-Sitter CLI"
          npm install -g tree-sitter-cli
          tree-sitter --version
          echo "::endgroup::"

      - name: Build MeTTaTron
        env:
          RUSTFLAGS: ${{ matrix.platform.rustflags }}
        run: |
          echo "::group::Building MeTTaTron"
          cargo build --release --target ${{ matrix.platform.target }} --verbose
          ls -lh target/${{ matrix.platform.target }}/release/mettatron*
          echo "::endgroup::"

      - name: Build rholang-cli (Unix)
        if: runner.os != 'Windows'
        env:
          RUSTFLAGS: ${{ matrix.platform.rustflags }}
        run: |
          echo "::group::Building rholang-cli"
          cd ../f1r3node/rholang
          cargo build --release --bin rholang-cli --target ${{ matrix.platform.target }} --verbose
          ls -lh ../../f1r3node/target/${{ matrix.platform.target }}/release/rholang-cli*
          echo "::endgroup::"

      - name: Run unit tests
        env:
          RUSTFLAGS: ${{ matrix.platform.rustflags }}
        run: |
          echo "::group::Unit tests"
          cargo test --lib --target ${{ matrix.platform.target }} --verbose -- --nocapture
          echo "::endgroup::"

      - name: Run Tree-Sitter corpus integration test
        env:
          RUSTFLAGS: ${{ matrix.platform.rustflags }}
        run: |
          echo "::group::Running Tree-Sitter corpus tests via cargo test"
          cargo test --test tree_sitter_corpus --target ${{ matrix.platform.target }} --verbose -- --nocapture
          echo "::endgroup::"

      - name: Run integration tests
        env:
          RUSTFLAGS: ${{ matrix.platform.rustflags }}
          RHOLANG_CLI_PATH: ${{ github.workspace }}/../f1r3node/target/${{ matrix.platform.target }}/release/rholang-cli
        run: |
          echo "::group::Integration tests"
          echo "RHOLANG_CLI_PATH=$RHOLANG_CLI_PATH"
          ls -lh "$RHOLANG_CLI_PATH" || echo "rholang-cli not found at expected path"
          cargo test --test rholang_integration --target ${{ matrix.platform.target }} --verbose -- --nocapture
          echo "::endgroup::"

      - name: Run categorized tests
        env:
          RUSTFLAGS: ${{ matrix.platform.rustflags }}
          RHOLANG_CLI_PATH: ${{ github.workspace }}/../f1r3node/target/${{ matrix.platform.target }}/release/rholang-cli
        run: |
          echo "::group::Basic tests"
          cargo test --test rholang_integration test_basic_evaluation --target ${{ matrix.platform.target }} -- --nocapture
          echo "::endgroup::"

          echo "::group::Control flow tests"
          cargo test --test rholang_integration test_control_flow --target ${{ matrix.platform.target }} -- --nocapture
          echo "::endgroup::"

          echo "::group::Type system tests"
          cargo test --test rholang_integration test_types --target ${{ matrix.platform.target }} -- --nocapture
          echo "::endgroup::"

          echo "::group::Composability tests"
          cargo test --test rholang_integration test_composability --target ${{ matrix.platform.target }} -- --nocapture
          echo "::endgroup::"

      - name: Prepare binaries (Unix)
        if: runner.os != 'Windows'
        run: |
          mkdir -p dist
          # Copy binary
          cp target/${{ matrix.platform.target }}/release/mettatron dist/
          cp ../f1r3node/target/${{ matrix.platform.target }}/release/rholang-cli dist/

          # Copy libraries
          cp target/${{ matrix.platform.target }}/release/libmettatron.rlib dist/
          if [ "${{ runner.os }}" = "Linux" ]; then
            cp target/${{ matrix.platform.target }}/release/libmettatron.so dist/
          elif [ "${{ runner.os }}" = "macOS" ]; then
            cp target/${{ matrix.platform.target }}/release/libmettatron.dylib dist/
          fi

          chmod +x dist/mettatron dist/rholang-cli

      - name: Create tarball (Unix)
        if: runner.os != 'Windows'
        run: |
          cd dist
          tar czf ../${{ matrix.platform.artifact_name }}.tar.gz *
          cd ..

      - name: Create zip archive
        run: |
          cd dist
          7z a ../${{ matrix.platform.artifact_name }}.zip *

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform.artifact_name }}
          path: |
            ${{ matrix.platform.artifact_name }}.tar.gz
            ${{ matrix.platform.artifact_name }}.zip
          retention-days: 14

      - name: Upload test logs on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: test-logs-${{ matrix.platform.artifact_name }}
          path: |
            target/${{ matrix.platform.target }}/debug/
            integration/*.rho
            tests/*.rs
          retention-days: 7

  package-deb:
    name: Create .deb package (nightly)
    needs: build-and-test-matrix
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download Linux x86_64 build
        uses: actions/download-artifact@v4
        with:
          name: mettatron-linux-x86_64

      - name: Extract binaries
        run: |
          tar xzf mettatron-linux-x86_64.tar.gz
          mkdir -p target/release
          mv mettatron target/release/
          mv rholang-cli target/release/
          mv libmettatron.so target/release/
          mv libmettatron.rlib target/release/

      - name: Install cargo-deb
        run: cargo install cargo-deb

      - name: Create .deb package
        run: cargo deb --no-build --no-strip

      - name: Upload .deb package
        uses: actions/upload-artifact@v4
        with:
          name: nightly-debian-package
          path: target/debian/*.deb
          retention-days: 14

  package-rpm:
    name: Create .rpm package (nightly)
    needs: build-and-test-matrix
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download Linux x86_64 build
        uses: actions/download-artifact@v4
        with:
          name: mettatron-linux-x86_64

      - name: Extract binaries
        run: |
          tar xzf mettatron-linux-x86_64.tar.gz
          mkdir -p target/release
          mv mettatron target/release/
          mv rholang-cli target/release/
          mv libmettatron.so target/release/
          mv libmettatron.rlib target/release/

      - name: Install cargo-generate-rpm
        run: cargo install cargo-generate-rpm

      - name: Create .rpm package
        run: cargo generate-rpm

      - name: Upload .rpm package
        uses: actions/upload-artifact@v4
        with:
          name: nightly-rpm-package
          path: target/generate-rpm/*.rpm
          retention-days: 14

  package-macos-dmg:
    name: Create macOS .dmg installer (nightly)
    needs: build-and-test-matrix
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download macOS build (ARM64)
        uses: actions/download-artifact@v4
        with:
          name: mettatron-macos-arm64

      - name: Extract binaries
        run: tar xzf mettatron-macos-arm64.tar.gz

      - name: Create .dmg
        run: |
          mkdir -p dmg-contents
          cp mettatron dmg-contents/
          cp rholang-cli dmg-contents/
          cp libmettatron.dylib dmg-contents/
          cp libmettatron.rlib dmg-contents/
          hdiutil create -volname "MeTTaTron Nightly" -srcfolder dmg-contents -ov -format UDZO mettatron-macos-nightly.dmg

      - name: Upload .dmg
        uses: actions/upload-artifact@v4
        with:
          name: nightly-macos-dmg
          path: mettatron-macos-nightly.dmg
          retention-days: 14

  package-arch:
    name: Create Arch Linux packages (nightly)
    needs: build-and-test-matrix
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch:
          - name: x86_64
            artifact: mettatron-linux-x86_64
          - name: aarch64
            artifact: mettatron-linux-arm64
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download Linux build
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.arch.artifact }}

      - name: Extract binaries
        run: |
          tar xzf ${{ matrix.arch.artifact }}.tar.gz
          mkdir -p binaries
          mv mettatron binaries/
          mv rholang-cli binaries/
          mv libmettatron.so binaries/
          mv libmettatron.rlib binaries/

      - name: Build Arch package in container
        run: |
          # Create a build script with architecture override
          ARCH_NAME="${{ matrix.arch.name }}"
          cat > build-arch-pkg.sh <<EOF
          #!/bin/bash
          set -e

          # Install required packages
          pacman -Sy --noconfirm base-devel git

          # Create build user (makepkg won't run as root)
          useradd -m builder
          chown -R builder:builder /build

          # Build as non-root user with CARCH override
          cd /build
          su builder -c "CARCH=${ARCH_NAME} makepkg --nodeps --skipinteg --ignorearch"

          # Copy package to output (exclude debug packages)
          for pkg in *.pkg.tar.zst; do
            if [[ ! "\$pkg" =~ -debug- ]]; then
              cp "\$pkg" /output/
            fi
          done
          EOF

          chmod +x build-arch-pkg.sh

          # Prepare PKGBUILD with pre-built binaries from PKGBUILD-nightly template
          mkdir -p build-context
          cp packaging/arch/PKGBUILD-nightly build-context/PKGBUILD
          cp -r binaries build-context/

          # Modify PKGBUILD to use pre-built binaries instead of building from source
          # Keep pkgname, provides, conflicts from PKGBUILD-nightly but skip git operations
          cat > build-context/PKGBUILD <<'PKGBUILD_EOF'
          # Maintainer: F1R3FLY.io <noreply@f1r3fly.io>
          pkgname=mettatron-nightly
          pkgver=__VERSION__
          pkgrel=1
          pkgdesc="MeTTa language evaluator with lazy evaluation and pattern matching (nightly build)"
          arch=('__ARCH__')
          url="https://github.com/F1R3FLY-io/MeTTa-Compiler"
          license=('Apache')
          depends=('gcc-libs')
          provides=('mettatron')
          conflicts=('mettatron')
          source=()
          sha256sums=()

          package() {
              install -Dm755 "/build/binaries/mettatron" "$pkgdir/usr/bin/mettatron"
              install -Dm755 "/build/binaries/rholang-cli" "$pkgdir/usr/bin/rholang-cli"
              install -Dm644 "/build/binaries/libmettatron.so" "$pkgdir/usr/lib/libmettatron.so"
              install -Dm644 "/build/binaries/libmettatron.rlib" "$pkgdir/usr/lib/libmettatron.rlib"
          }
          PKGBUILD_EOF

          # Replace placeholders
          sed -i "s/__VERSION__/$(date +%Y%m%d)/" build-context/PKGBUILD
          sed -i "s/__ARCH__/${{ matrix.arch.name }}/" build-context/PKGBUILD

          # Run build in container
          mkdir -p output
          docker run --rm \
            -v "$PWD/build-context:/build" \
            -v "$PWD/output:/output" \
            -v "$PWD/build-arch-pkg.sh:/build-arch-pkg.sh" \
            archlinux:latest \
            /build-arch-pkg.sh

      - name: Upload Arch package
        uses: actions/upload-artifact@v4
        with:
          name: nightly-arch-package-${{ matrix.arch.name }}
          path: output/*.pkg.tar.zst
          retention-days: 14

  test-deb-package:
    name: Sanity Check - Debian Package
    needs: package-deb
    runs-on: ubuntu-latest
    steps:
      - name: Download .deb package
        uses: actions/download-artifact@v4
        with:
          name: nightly-debian-package

      - name: Install package
        run: |
          sudo dpkg -i *.deb || true
          sudo apt-get install -f -y

      - name: Verify installation
        run: |
          which mettatron
          which rholang-cli
          mettatron --version || mettatron --help || echo "No version flag, continuing..."

      - name: Check shared libraries
        run: |
          ldd $(which mettatron)
          ldd $(which rholang-cli)
          ls -lh /usr/lib/libmettatron.so
          ls -lh /usr/lib/libmettatron.rlib

      - name: Create test MeTTa file
        run: |
          cat > test.metta <<'EOF'
          ; Simple test
          (= (fact 0) 1)
          (= (fact $n) (* $n (fact (- $n 1))))
          !(fact 5)
          EOF

      - name: Run basic functionality test
        run: |
          mettatron test.metta > output.txt
          cat output.txt
          grep -q "120" output.txt || (echo "Expected output '120' not found"; exit 1)

  test-rpm-package:
    name: Sanity Check - RPM Package
    needs: package-rpm
    runs-on: ubuntu-latest
    container: fedora:40
    steps:
      - name: Download .rpm package
        uses: actions/download-artifact@v4
        with:
          name: nightly-rpm-package

      - name: Install package
        run: |
          dnf install -y *.rpm

      - name: Verify installation
        run: |
          command -v mettatron
          command -v rholang-cli
          mettatron --version || mettatron --help || echo "No version flag, continuing..."

      - name: Check shared libraries
        run: |
          ldd $(command -v mettatron)
          ldd $(command -v rholang-cli)
          ls -lh /usr/lib64/libmettatron.so
          ls -lh /usr/lib64/libmettatron.rlib

      - name: Create test MeTTa file
        run: |
          cat > test.metta <<'EOF'
          ; Simple test
          (= (fact 0) 1)
          (= (fact $n) (* $n (fact (- $n 1))))
          !(fact 5)
          EOF

      - name: Run basic functionality test
        run: |
          mettatron test.metta > output.txt
          cat output.txt
          grep -q "120" output.txt || (echo "Expected output '120' not found"; exit 1)

  test-arch-package:
    name: Sanity Check - Arch Package (${{ matrix.arch }})
    needs: package-arch
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # Only test x86_64 - aarch64 requires cross-architecture setup
        arch: [x86_64]
    container: archlinux:latest
    steps:
      - name: Download Arch package
        uses: actions/download-artifact@v4
        with:
          name: nightly-arch-package-${{ matrix.arch }}

      - name: Install package
        run: |
          pacman -Sy --noconfirm
          pacman -U --noconfirm *.pkg.tar.zst

      - name: Verify installation
        run: |
          command -v mettatron
          command -v rholang-cli
          mettatron --version || mettatron --help || echo "No version flag, continuing..."

      - name: Check shared libraries
        run: |
          ldd $(command -v mettatron) || true
          ldd $(command -v rholang-cli) || true
          ls -lh /usr/lib/libmettatron.so
          ls -lh /usr/lib/libmettatron.rlib

      - name: Create test MeTTa file
        run: |
          cat > test.metta <<'EOF'
          ; Simple test
          (= (fact 0) 1)
          (= (fact $n) (* $n (fact (- $n 1))))
          !(fact 5)
          EOF

      - name: Run basic functionality test
        run: |
          mettatron test.metta > output.txt
          cat output.txt
          grep -q "120" output.txt || (echo "Expected output '120' not found"; exit 1)

  test-macos-dmg:
    name: Sanity Check - macOS DMG
    needs: package-macos-dmg
    runs-on: macos-latest
    steps:
      - name: Download DMG
        uses: actions/download-artifact@v4
        with:
          name: nightly-macos-dmg

      - name: Mount and install DMG
        run: |
          hdiutil attach *.dmg
          sudo cp "/Volumes/MeTTaTron Nightly/mettatron" /usr/local/bin/
          sudo cp "/Volumes/MeTTaTron Nightly/rholang-cli" /usr/local/bin/
          sudo mkdir -p /usr/local/lib
          sudo cp "/Volumes/MeTTaTron Nightly/libmettatron.dylib" /usr/local/lib/
          sudo cp "/Volumes/MeTTaTron Nightly/libmettatron.rlib" /usr/local/lib/
          hdiutil detach "/Volumes/MeTTaTron Nightly" || true

      - name: Verify installation
        run: |
          which mettatron
          which rholang-cli
          mettatron --version || mettatron --help || echo "No version flag, continuing..."

      - name: Check shared libraries
        run: |
          otool -L $(which mettatron)
          otool -L $(which rholang-cli)
          ls -lh /usr/local/lib/libmettatron.dylib
          ls -lh /usr/local/lib/libmettatron.rlib

      - name: Create test MeTTa file
        run: |
          cat > test.metta <<'EOF'
          ; Simple test
          (= (fact 0) 1)
          (= (fact $n) (* $n (fact (- $n 1))))
          !(fact 5)
          EOF

      - name: Run basic functionality test
        run: |
          mettatron test.metta > output.txt
          cat output.txt
          grep -q "120" output.txt || (echo "Expected output '120' not found"; exit 1)

  test-coverage:
    name: Test Coverage Report
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Checkout dependencies
        run: |
          cd ../
          git clone --depth=1 --branch dylon/mettatron https://github.com/F1R3FLY-io/f1r3node.git f1r3node
          git clone --depth=1 --branch main https://github.com/trueagi-io/MORK.git MORK
          git clone --depth=1 --branch master https://github.com/Adam-Vandervorst/PathMap.git PathMap

      - name: Install protobuf compiler
        run: sudo apt-get update && sudo apt-get install -y protobuf-compiler

      - name: Install Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: nightly

      - name: Install tarpaulin
        run: cargo install cargo-tarpaulin

      - name: Build rholang-cli for tests
        env:
          RUSTFLAGS: "-C target-feature=+aes,+sse2"
        run: |
          cd ../f1r3node/rholang
          cargo build --release --bin rholang-cli --verbose
          ls -lh ../target/release/rholang-cli

      - name: Generate coverage report
        env:
          RUSTFLAGS: "-C target-feature=+aes,+sse2"
        run: cargo tarpaulin --verbose --workspace --timeout 300 --out Xml

      - name: Upload coverage to codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./cobertura.xml
          fail_ci_if_error: false

  create-nightly-summary:
    name: Create Nightly Build Summary
    needs: [build-and-test-matrix, package-deb, package-rpm, package-macos-dmg, package-arch, test-deb-package, test-rpm-package, test-arch-package, test-macos-dmg, test-coverage]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Generate summary
        run: |
          echo "## Nightly Build Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Date:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Build Matrix Status" >> $GITHUB_STEP_SUMMARY
          echo "| Platform | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Linux x86_64 | ${{ needs.build-and-test-matrix.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Linux ARM64 | ${{ needs.build-and-test-matrix.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| macOS x86_64 | ${{ needs.build-and-test-matrix.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| macOS ARM64 | ${{ needs.build-and-test-matrix.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Packaging Status" >> $GITHUB_STEP_SUMMARY
          echo "| Package | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|---------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Debian (.deb) | ${{ needs.package-deb.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| RPM (.rpm) | ${{ needs.package-rpm.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Arch (.pkg.tar.zst) | ${{ needs.package-arch.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| macOS (.dmg) | ${{ needs.package-macos-dmg.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Package Sanity Checks" >> $GITHUB_STEP_SUMMARY
          echo "| Package | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|---------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Debian (.deb) | ${{ needs.test-deb-package.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| RPM (.rpm) | ${{ needs.test-rpm-package.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Arch x86_64 (.pkg.tar.zst) | ${{ needs.test-arch-package.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| macOS (.dmg) | ${{ needs.test-macos-dmg.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "_Note: Arch aarch64 package is built but not sanity-checked (requires cross-architecture test setup)_" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Test Coverage" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Coverage Report | ${{ needs.test-coverage.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.build-and-test-matrix.result }}" == "success" ] && \
             [ "${{ needs.package-deb.result }}" == "success" ] && \
             [ "${{ needs.package-rpm.result }}" == "success" ] && \
             [ "${{ needs.package-arch.result }}" == "success" ] && \
             [ "${{ needs.package-macos-dmg.result }}" == "success" ] && \
             [ "${{ needs.test-deb-package.result }}" == "success" ] && \
             [ "${{ needs.test-rpm-package.result }}" == "success" ] && \
             [ "${{ needs.test-arch-package.result }}" == "success" ] && \
             [ "${{ needs.test-macos-dmg.result }}" == "success" ]; then
            echo "✅ All nightly builds, packages, and sanity checks succeeded!" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Some nightly builds, packages, or sanity checks failed. Please review the logs." >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 Download Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "[**View all artifacts for this run →**](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}#artifacts)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Available artifacts:**" >> $GITHUB_STEP_SUMMARY
          echo "- Platform binaries: Linux x86_64, Linux ARM64, macOS x86_64, macOS ARM64 (.tar.gz, .zip)" >> $GITHUB_STEP_SUMMARY
          echo "- Debian package (.deb)" >> $GITHUB_STEP_SUMMARY
          echo "- RPM package (.rpm)" >> $GITHUB_STEP_SUMMARY
          echo "- Arch packages x86_64 and aarch64 (.pkg.tar.zst)" >> $GITHUB_STEP_SUMMARY
          echo "- macOS DMG installer (.dmg)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Note:** All artifacts are retained for 14 days and are accessible to repository collaborators." >> $GITHUB_STEP_SUMMARY

      - name: Create issue on failure
        if: |
          failure() ||
          needs.build-and-test-matrix.result == 'failure' ||
          needs.package-deb.result == 'failure' ||
          needs.package-rpm.result == 'failure' ||
          needs.package-arch.result == 'failure' ||
          needs.package-macos-dmg.result == 'failure' ||
          needs.test-deb-package.result == 'failure' ||
          needs.test-rpm-package.result == 'failure' ||
          needs.test-arch-package.result == 'failure' ||
          needs.test-macos-dmg.result == 'failure'
        uses: actions/github-script@v7
        with:
          script: |
            const title = '🌙 Nightly builds failed on ' + new Date().toISOString().split('T')[0];
            const body = `The nightly build suite has failed.

            **Workflow Run:** ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

            **Build Status:**
            - Build Matrix: ${{ needs.build-and-test-matrix.result }}

            **Packaging Status:**
            - Debian Package: ${{ needs.package-deb.result }}
            - RPM Package: ${{ needs.package-rpm.result }}
            - Arch Package: ${{ needs.package-arch.result }}
            - macOS DMG: ${{ needs.package-macos-dmg.result }}

            **Sanity Checks:**
            - Debian Test: ${{ needs.test-deb-package.result }}
            - RPM Test: ${{ needs.test-rpm-package.result }}
            - Arch Test: ${{ needs.test-arch-package.result }}
            - macOS Test: ${{ needs.test-macos-dmg.result }}

            **Coverage:**
            - Test Coverage: ${{ needs.test-coverage.result }}

            Please investigate and fix the failing builds.`;

            // Check if issue already exists
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'nightly-failure'
            });

            if (issues.data.length === 0) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: body,
                labels: ['nightly-failure', 'automated']
              });
            }
