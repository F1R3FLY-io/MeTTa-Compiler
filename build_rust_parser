# Cleaning the build folder
cd parser/bnfc/rust
mkdir -p output
rm -rf output/*

# Copying the grammar and other required files
cp Grammar.cf output/Grammar.cf
cp ReplacePattern.c output/ReplacePattern.c
cd output

# Generating the parser source files in C
bnfc --c -m Grammar.cf

# Adjusting Makefile
gcc ReplacePattern.c -o ReplacePattern
./ReplacePattern <Makefile >Makefile.tmp
rm Makefile
mv Makefile.tmp Makefile

# Building the C parser executable and intermediate files that are required for Rust as well
make

# Removing some extra files
rm *.o
rm Grammar.cf
rm ReplacePattern.c
rm ReplacePattern

# Building commands for "transpiling" the project source .c and .h files into Rust
# This also builds the file "compile_commands.json" that are required for Rust
bear -- gcc *.c -o binary.tmp

# Removing some extra files
rm binary.tmp

# Generating Rust files from C
c2rust transpile --emit-build-files --binary Test compile_commands.json > /dev/null 2>&1

# Building the Rust project
RUSTFLAGS="-Awarnings" cargo build --release
mv ./target/release/Test ./target/release/RustParser
cd ..

# echo "The Rust parser has been built. Usage: ./output/target/release/RustParser SampleInput.txt [>SampleOutput.txt]"
echo -e "\e[1;32mThe Rust parser has been built. Usage: ./output/target/release/RustParser SampleInput.txt [>SampleOutput.txt]\e[0m"
echo -e "\e[1;32mYou may find the Rust files in the folder parser/bnfc/rust/output/*.rs\e[0m"

# Showing the results:
read -n 1 -s -r -p "Press any key to see the parser output>"

# - Displaying sample input file
echo ""
echo "------------------- Sample input ----------------------"
cat SampleInput.txt
echo "------------------ /Sample input ----------------------"

# - Running the "Rust" parser to display the output
echo "---------------- Rust Parser output -------------------"
./output/target/release/RustParser SampleInput.txt
echo "--------------- /Rust Parser output -------------------"

# Finilizing and returning to the original folder
cd ../../../
