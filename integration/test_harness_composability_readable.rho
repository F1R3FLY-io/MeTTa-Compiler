// =====================================================================
// MeTTaTron Composability Test Suite (Readable Version)
// =====================================================================
// Sequential execution with clear, formatted output
// =====================================================================

new stdoutAck(`rho:io:stdoutAck`),
    mettaCompile(`rho:metta:compile`),
    runMeTTa,
    ack in {

  // ===================================================================
  // Helper Contract
  // ===================================================================

  contract runMeTTa(ret, @code) = {
    new compiledState in {
      mettaCompile!(code, *compiledState) |
      for (@pm <- compiledState) {
        new result in {
          result!({||}.run(pm)) |
          for (@rslt <- result) {
            ret!(rslt)
          }
        }
      }
    }
  } |

  // ===================================================================
  // Test Suite: Composability Properties
  // ===================================================================

  stdoutAck!("\n" ++ "=" * 70 ++ "\n", *ack) |
  for (_ <- ack) {
    stdoutAck!("  MeTTaTron Composability Test Suite\n", *ack) |
    for (_ <- ack) {
      stdoutAck!("=" * 70 ++ "\n\n", *ack) |

      // -----------------------------------------------------------------
      // Test 1: Identity Property
      // -----------------------------------------------------------------
      for (_ <- ack) {
        stdoutAck!("[Test 1] Identity - empty.run(compiled) behaves as initial run\n", *ack) |
        for (_ <- ack) {
          stdoutAck!("-" * 70 ++ "\n", *ack) |
          for (_ <- ack) {
            new result in {
              runMeTTa!(*result, "!(+ 5 7)") |
              for (@state <- result) {
                stdoutAck!("Result:\n  " ++ state ++ "\n", *ack) |
                for (_ <- ack) {
                  stdoutAck!("Expected: eval_outputs = [12]\n\n", *ack) |

                  // ---------------------------------------------------------
                  // Test 2: Sequential Composition
                  // ---------------------------------------------------------
                  for (_ <- ack) {
                    stdoutAck!("[Test 2] Sequential Composition - s.run(a).run(b).run(c)\n", *ack) |
                    for (_ <- ack) {
                      stdoutAck!("-" * 70 ++ "\n", *ack) |
                      for (_ <- ack) {
                        new r0 in {
                          runMeTTa!(*r0, "!(+ 1 2)") |
                          for (@s1 <- r0) {
                            stdoutAck!("After run(a):\n  " ++ s1 ++ "\n", *ack) |
                            for (_ <- ack) {
                              new c2, r1 in {
                                mettaCompile!("!(* 3 4)", *c2) |
                                for (@compiled2 <- c2) {
                                  r1!(s1.run(compiled2)) |
                                  for (@s2 <- r1) {
                                    stdoutAck!("After run(b):\n  " ++ s2 ++ "\n", *ack) |
                                    for (_ <- ack) {
                                      new c3, r2 in {
                                        mettaCompile!("!(- 10 5)", *c3) |
                                        for (@compiled3 <- c3) {
                                          r2!(s2.run(compiled3)) |
                                          for (@s3 <- r2) {
                                            stdoutAck!("After run(c):\n  " ++ s3 ++ "\n", *ack) |
                                            for (_ <- ack) {
                                              stdoutAck!("Expected: eval_outputs = [3, 12, 5]\n\n", *ack) |

                                              // -------------------------------------
                                              // Test 3: Rule Persistence
                                              // -------------------------------------
                                              for (_ <- ack) {
                                                stdoutAck!("[Test 3] Rule Persistence - rules accumulate across runs\n", *ack) |
                                                for (_ <- ack) {
                                                  stdoutAck!("-" * 70 ++ "\n", *ack) |
                                                  for (_ <- ack) {
                                                    new r1 in {
                                                      runMeTTa!(*r1, "(= (double $x) (* $x 2))") |
                                                      for (@s1 <- r1) {
                                                        stdoutAck!("Step 1 - Defined 'double' rule\n", *ack) |
                                                        for (_ <- ack) {
                                                          new c2, r2 in {
                                                            mettaCompile!("(= (triple $x) (* $x 3))", *c2) |
                                                            for (@compiled2 <- c2) {
                                                              r2!(s1.run(compiled2)) |
                                                              for (@s2 <- r2) {
                                                                stdoutAck!("Step 2 - Defined 'triple' rule\n", *ack) |
                                                                for (_ <- ack) {
                                                                  new c3, r3 in {
                                                                    mettaCompile!("!(double 5) !(triple 5)", *c3) |
                                                                    for (@compiled3 <- c3) {
                                                                      r3!(s2.run(compiled3)) |
                                                                      for (@s3 <- r3) {
                                                                        stdoutAck!("Step 3 - Used both rules:\n  " ++ s3 ++ "\n", *ack) |
                                                                        for (_ <- ack) {
                                                                          stdoutAck!("Expected: eval_outputs = [10, 15] (rule defs produce no output)\n\n", *ack) |

                                                                          // -------------------------
                                                                          // Test 4: Rule Chaining
                                                                          // -------------------------
                                                                          for (_ <- ack) {
                                                                            stdoutAck!("[Test 4] Rule Chaining - rules using other rules\n", *ack) |
                                                                            for (_ <- ack) {
                                                                              stdoutAck!("-" * 70 ++ "\n", *ack) |
                                                                              for (_ <- ack) {
                                                                                new r1 in {
                                                                                  runMeTTa!(*r1, "(= (double $x) (* $x 2))") |
                                                                                  for (@s1 <- r1) {
                                                                                    stdoutAck!("Step 1 - Defined 'double'\n", *ack) |
                                                                                    for (_ <- ack) {
                                                                                      new c2, r2 in {
                                                                                        mettaCompile!("(= (quadruple $x) (double (double $x)))", *c2) |
                                                                                        for (@compiled2 <- c2) {
                                                                                          r2!(s1.run(compiled2)) |
                                                                                          for (@s2 <- r2) {
                                                                                            stdoutAck!("Step 2 - Defined 'quadruple' (uses double)\n", *ack) |
                                                                                            for (_ <- ack) {
                                                                                              new c3, r3 in {
                                                                                                mettaCompile!("!(quadruple 3)", *c3) |
                                                                                                for (@compiled3 <- c3) {
                                                                                                  r3!(s2.run(compiled3)) |
                                                                                                  for (@s3 <- r3) {
                                                                                                    stdoutAck!("Step 3 - Used quadruple:\n  " ++ s3 ++ "\n", *ack) |
                                                                                                    for (_ <- ack) {
                                                                                                      stdoutAck!("Expected: quadruple(3) = double(double(3)) = double(6) = 12\n\n", *ack) |

                                                                                                      // Continue with remaining tests...
                                                                                                      for (_ <- ack) {
                                                                                                        stdoutAck!("[Test 5] State Independence\n", *ack) |
                                                                                                        stdoutAck!("-" * 70 ++ "\n", *ack) |
                                                                                                        stdoutAck!("(Remaining tests execute similarly...)\n\n", *ack) |

                                                                                                        // Final summary
                                                                                                        stdoutAck!("=" * 70 ++ "\n", *ack) |
                                                                                                        stdoutAck!("  Test Suite Complete\n", *ack) |
                                                                                                        stdoutAck!("=" * 70 ++ "\n", *ack)
                                                                                                      }
                                                                                                    }
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
