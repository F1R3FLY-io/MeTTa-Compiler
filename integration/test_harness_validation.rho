// =====================================================================
// MeTTaTron Test Harness with Result Validation
// =====================================================================
// Test harness that validates outputs against expected results
// =====================================================================

new stdoutAck(`rho:io:stdoutAck`),
    mettaCompile(`rho:metta:compile`),
    runMeTTa,
    testWithValidation,
    extractOutput,
    ack in {

  // ===================================================================
  // Helper: Extract eval_outputs from PathMap result
  // ===================================================================
  contract extractOutput(@pathmap, ret) = {
    // PathMap format: {|("pending_exprs", [...]), ("environment", ...), ("eval_outputs", [...])|}
    // We need to extract the eval_outputs list
    // This is a placeholder - actual extraction depends on PathMap API
    ret!(pathmap)
  } |

  // ===================================================================
  // runMeTTa: Compile and evaluate MeTTa code
  // ===================================================================
  contract runMeTTa(ret, @code) = {
    new compiledState in {
      mettaCompile!(*compiledState, code) |
      for (@pm <- compiledState) {
        new result in {
          result!({||}.run(pm)) |
          for (@rslt <- result) {
            ret!(rslt)
          }
        }
      }
    }
  } |

  // ===================================================================
  // testWithValidation: Run test and validate result
  // ===================================================================
  contract testWithValidation(@testName, @code, @expectedOutput) = {
    new result in {
      stdoutAck!("Test: " ++ testName ++ "\n", *ack) |
      for (_ <- ack) {
        stdoutAck!("  Code: " ++ code ++ "\n", *ack) |
        for (_ <- ack) {
          stdoutAck!("  Expected: " ++ expectedOutput ++ "\n", *ack) |
          for (_ <- ack) {
            runMeTTa!(*result, code) |
            for (@rslt <- result) {
              stdoutAck!("  Result: ", *ack) |
              for (_ <- ack) {
                stdoutAck!(rslt, *ack) |
                for (_ <- ack) {
                  stdoutAck!("\n", *ack) |
                  for (_ <- ack) {
                    // Note: Actual validation would require parsing the PathMap
                    // For now, we just display results
                    stdoutAck!("  Status: Output displayed (manual validation needed)\n\n", *ack)
                  }
                }
              }
            }
          }
        }
      }
    }
  } |

  // ===================================================================
  // Test Suite with Expected Outputs
  // ===================================================================

  stdoutAck!("=== MeTTaTron Test Harness (With Validation) ===\n\n", *ack) |

  // Arithmetic Tests
  for (_ <- ack) {
    stdoutAck!("--- Arithmetic Tests ---\n", *ack) |
    for (_ <- ack) {
      testWithValidation!("Addition", "(+ 1 2)", "3")
    } |
    for (_ <- ack) {
      testWithValidation!("Subtraction", "(- 10 5)", "5")
    } |
    for (_ <- ack) {
      testWithValidation!("Multiplication", "(* 3 4)", "12")
    } |
    for (_ <- ack) {
      testWithValidation!("Division", "(/ 10 2)", "5")
    } |
    for (_ <- ack) {
      testWithValidation!("Nested", "(+ 1 (* 2 3))", "7")
    }
  } |

  // Boolean Tests
  for (_ <- ack) {
    stdoutAck!("\n--- Boolean Tests ---\n", *ack) |
    for (_ <- ack) {
      testWithValidation!("Less than (true)", "(< 1 2)", "true")
    } |
    for (_ <- ack) {
      testWithValidation!("Less than (false)", "(< 3 2)", "false")
    } |
    for (_ <- ack) {
      testWithValidation!("Greater than", "(> 5 3)", "true")
    } |
    for (_ <- ack) {
      testWithValidation!("Equal", "(== 4 4)", "true")
    } |
    for (_ <- ack) {
      testWithValidation!("Less or equal", "(<= 2 2)", "true")
    }
  } |

  // Control Flow Tests
  for (_ <- ack) {
    stdoutAck!("\n--- Control Flow Tests ---\n", *ack) |
    for (_ <- ack) {
      testWithValidation!("If true", "(if (< 1 2) \"yes\" \"no\")", "\"yes\"")
    } |
    for (_ <- ack) {
      testWithValidation!("If false", "(if (> 1 2) \"yes\" \"no\")", "\"no\"")
    }
  } |

  // Quote and Eval Tests
  for (_ <- ack) {
    stdoutAck!("\n--- Quote and Eval Tests ---\n", *ack) |
    for (_ <- ack) {
      testWithValidation!("Quote", "(quote (+ 1 2))", "(+ 1 2)")
    } |
    for (_ <- ack) {
      testWithValidation!("Eval", "(eval (quote (+ 1 2)))", "3")
    }
  } |

  // Error Handling Tests
  for (_ <- ack) {
    stdoutAck!("\n--- Error Handling Tests ---\n", *ack) |
    for (_ <- ack) {
      testWithValidation!("Error creation", "(error \"test\" 42)", "(error \"test\" 42)")
    } |
    for (_ <- ack) {
      testWithValidation!("Catch error", "(catch (error \"e\" 0) \"ok\")", "\"ok\"")
    } |
    for (_ <- ack) {
      testWithValidation!("Is error (true)", "(is-error (error \"e\" 0))", "true")
    } |
    for (_ <- ack) {
      testWithValidation!("Is error (false)", "(is-error 42)", "false")
    }
  } |

  // Rule Definition and Usage Tests
  for (_ <- ack) {
    stdoutAck!("\n--- Rule Tests ---\n", *ack) |
    for (_ <- ack) {
      testWithValidation!("Rule definition", "(= (double $x) (* $x 2))", "(no output)")
    } |
    for (_ <- ack) {
      stdoutAck!("Test: Rule usage (sequential)\n", *ack) |
      for (_ <- ack) {
        stdoutAck!("  Expected: 42 from !(double 21)\n", *ack) |
        for (_ <- ack) {
          new result1 in {
            runMeTTa!(*result1, "(= (double $x) (* $x 2))") |
            for (@acc1 <- result1) {
              stdoutAck!("  Step 1 (define): ", *ack) |
              for (_ <- ack) {
                stdoutAck!(acc1, *ack) |
                for (_ <- ack) {
                  stdoutAck!("\n", *ack) |
                  for (_ <- ack) {
                    new useCompiled, result2 in {
                      mettaCompile!(*useCompiled, "!(double 21)") |
                      for (@compiled <- useCompiled) {
                        result2!(acc1.run(compiled)) |
                        for (@acc2 <- result2) {
                          stdoutAck!("  Step 2 (use): ", *ack) |
                          for (_ <- ack) {
                            stdoutAck!(acc2, *ack) |
                            for (_ <- ack) {
                              stdoutAck!("\n\n", *ack)
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  } |

  // Stress Test: Multiple Operations
  for (_ <- ack) {
    stdoutAck!("\n--- Stress Test: REPL Simulation ---\n", *ack) |
    for (_ <- ack) {
      stdoutAck!("Test: 10 sequential operations\n", *ack) |
      for (_ <- ack) {
        new r0, r1, r2, r3, r4, r5, r6, r7, r8, r9 in {
          // Operation 1
          runMeTTa!(*r0, "(+ 1 1)") |
          for (@a0 <- r0) {
            mettaCompile!(*r1, "(+ 2 2)") |
            for (@c1 <- r1) {
              r1!(a0.run(c1)) |
              for (@a1 <- r1) {
                mettaCompile!(*r2, "(+ 3 3)") |
                for (@c2 <- r2) {
                  r2!(a1.run(c2)) |
                  for (@a2 <- r2) {
                    mettaCompile!(*r3, "(+ 4 4)") |
                    for (@c3 <- r3) {
                      r3!(a2.run(c3)) |
                      for (@a3 <- r3) {
                        mettaCompile!(*r4, "(+ 5 5)") |
                        for (@c4 <- r4) {
                          r4!(a3.run(c4)) |
                          for (@a4 <- r4) {
                            stdoutAck!("  After 5 operations: ", *ack) |
                            for (_ <- ack) {
                              stdoutAck!(a4, *ack) |
                              for (_ <- ack) {
                                stdoutAck!("\n  Expected: 5 outputs (2, 4, 6, 8, 10)\n\n", *ack)
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  } |

  // Final Summary
  for (_ <- ack) {
    stdoutAck!("\n=== Test Suite Complete ===\n", *ack) |
    for (_ <- ack) {
      stdoutAck!("All tests executed. Manual validation of outputs required.\n", *ack)
    }
  }
}
