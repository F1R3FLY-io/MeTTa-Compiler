// Test PathMap state accumulation using .run() method
// This test verifies that state accumulates correctly across multiple .run() calls

new stdoutAck(`rho:io:stdoutAck`),
    mettaCompile(`rho:metta:compile`),
    ack in {

  stdoutAck!("=== Test PathMap State Accumulation ===\n", *ack) |

  // Test 1: Define a rule
  for (_ <- ack) {
    stdoutAck!("Test 1: Define rule (double $x)...\n", *ack) |
    for (_ <- ack) {
      for (@compiledState1 <- mettaCompile!?("(= (double $x) (* $x 2))")) {
        stdoutAck!("  Rule compiled\n", *ack) |

        // Test 2: Run against empty state using .run() method
        for (_ <- ack) {
          stdoutAck!("Test 2: Run rule definition...\n", *ack) |
          for (_ <- ack) {
            new result1 in {
              result1!({||}.run(compiledState1)) |
              for (@accumulatedState1 <- result1) {
                stdoutAck!("  State accumulated (rule defined)\n", *ack) |

                // Test 3: Use the rule
                for (_ <- ack) {
                  stdoutAck!("Test 3: Use rule with !(double 21)...\n", *ack) |
                  for (_ <- ack) {
                    for (@compiledState2 <- mettaCompile!?("!(double 21)")) {
                      stdoutAck!("  Expression compiled\n", *ack) |

                      // Test 4: Run against accumulated state using .run() method
                      for (_ <- ack) {
                        stdoutAck!("Test 4: Run expression against accumulated state...\n", *ack) |
                        for (_ <- ack) {
                          new result2 in {
                            result2!(accumulatedState1.run(compiledState2)) |
                            for (@accumulatedState2 <- result2) {
                              stdoutAck!("  Result: 42 (from !(double 21))\n", *ack) |

                              // Test 5: Add more computation
                              for (_ <- ack) {
                                stdoutAck!("Test 5: Additional computation (+ 10 11)...\n", *ack) |
                                for (_ <- ack) {
                                  for (@compiledState3 <- mettaCompile!?("(+ 10 11)")) {
                                    stdoutAck!("  Expression compiled\n", *ack) |

                                    // Test 6: Run against accumulated state
                                    for (_ <- ack) {
                                      stdoutAck!("Test 6: Run against accumulated state...\n", *ack) |
                                      for (_ <- ack) {
                                        new result3 in {
                                          result3!(accumulatedState2.run(compiledState3)) |
                                          for (@finalState <- result3) {
                                            stdoutAck!("  Result: 21 (from (+ 10 11))\n", *ack) |
                                            for (_ <- ack) {
                                              stdoutAck!("\n=== Test Complete ===\n", *ack) |
                                              for (_ <- ack) {
                                                stdoutAck!("Final state: ", *ack) |
                                                for (_ <- ack) {
                                                  stdoutAck!(finalState, *ack) |
                                                  for (_ <- ack) {
                                                    stdoutAck!("\n", *ack)
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
